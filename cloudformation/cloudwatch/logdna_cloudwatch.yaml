AWSTemplateFormatVersion: '2010-09-09'
Description: Logdna-Cloudwatch CloudFormation Integration v0.1
####Variables for Tagging and Functionality### 
Parameters:
  Owner:
    Type: String
    Default: danf
    Description: Enter Owner's identifier or nickname
  OwnerEmail:
    Type: String
    Default: someemail@email.com
    Description: For changes to this template please contact email below
  LambdaFunctionName:
    Type: String
    Default: logdna-cloudwatch-function
    Description: Enter the desired name of you Lambda Function
  LogDnaAPIKey:
    Type: String
    Default: SOMEAPI
    Description: Required! Insert your API key here
  LambdaFunctionRuntime:
    Type: String
    Default: nodejs10.x
    Description: Runtime for function (Refer to documentation or leave as is)
  MyLogGroupName:
    Type: String
    Default: /logdna/cloudwatch
    Description: Enter the desired name of your LogDNA  
  MyLogStreamName:
    Type: String
    Default: logging-test
    Description: LogStream created for testing purposes 

    
####Resourcess###
Resources: 
###Lambda Execution Role
  LogDNALambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
      
###Lambda Permissions (Allow CloudWatch to interact w/ Lambda):
  LogDNALambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LogDNACWLambdaFunction
      Principal: logs.us-east-1.amazonaws.com
      SourceArn:  
        Fn::GetAtt: 
          - "LogDNACWLogGroups"
          - "Arn"   

###Create Log Groups 
  LogDNACWLogGroups:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Join ['', [ !Ref MyLogGroupName, '-' , !Ref Owner]]
      RetentionInDays: 1


###Create Logstream associate w/ Log Group (for testing purposes)
  LogDNACWStreamLogs:
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: !Ref LogDNACWLogGroups
      LogStreamName: !Ref MyLogStreamName

#Lambda Function Setup
  LogDNACWLambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Code:     
        S3Bucket: dan-cloudwatch-logdna
        S3Key: logdna-cloudwatch.zip
        # Upload file just once... there's a better way of handling this, but will do later
        # ZipFile: |
        #   def handler(event, context):
        #     return
      Description: Logdna Lambda Function for CloudWatch integration provisioned through CF
      FunctionName: !Join ['', [ !Ref Owner, '-' , !Ref LambdaFunctionName]]
      Handler: index.handler
      Role: !GetAtt LogDNALambdaExecutionRole.Arn
      Runtime: !Ref LambdaFunctionRuntime
      Environment:
        Variables:
           LOGDNA_KEY: !Ref LogDnaAPIKey
#           LOGDNA_TAGS: optional,tags
#           LOGDNA_HOSTNAME: some.hostname
      Tags:
        - Key: "X-Owner"
          Value: !Ref Owner
        - Key: "X-Contact"
          Value: !Ref OwnerEmail
        - Key: "Reason"
          Value: "Test"
      

###Create CloudWatch Subscription Filter (aka Lambda Function Trigger event)
  LogDNASubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties: 
      DestinationArn:
        Fn::GetAtt: 
          - "LogDNACWLambdaFunction"
          - "Arn"     
      FilterPattern: ""
      LogGroupName: !Ref LogDNACWLogGroups
              
#Look into stack-level tags
#  LogDNACloudFormationLevelTags:
#    Type: AWS::CloudFormation::Stack