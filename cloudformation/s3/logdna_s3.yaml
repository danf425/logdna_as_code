AWSTemplateFormatVersion: '2010-09-09'
Description: Logdna-S3 CloudFormation Integration v0.1
####Variables for Tagging and Functionality### 
Parameters:
  Owner:
    Type: String
    Default: danf
    Description: Enter Owner's identifier or nickname
  OwnerEmail:
    Type: String
    Default: someemail@email.com
    Description: For changes to this template please contact email below
  BucketName:
    Description: Name of bucket integrated w/ LogDNA
    Default: danf-test-bucket
    Type: String
  LambdaFunctionName:
    Type: String
    Default: logdna-s3-cf-function
    Description: Enter the desired name of you Lambda Function
  LogDnaAPIKey:
    Type: String
    Default: 00bac37a61229321dccc92408d807189
    Description: Required! Insert your API key here
  LambdaFunctionRuntime:
    Type: String
    Default: nodejs10.x
    Description: Runtime for function (Refer to documentation or leave as is)
  LambdaMemorySize:
    Type: Number
    Default: 128
    Description:  Change limit depending on how heavy the files are going to be
  LambdaTimeout:
    Type: Number
    Default: 30
    Description: 30 secs is recommended if the function is going to be used to stream the logs from gzipped files
####Resourcess###
Resources: 
#Create/Edit S3 Bucket 
  Bucket:
    Type: AWS::S3::Bucket
    DependsOn: LogDNALambdaPermission
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:*'
          Function: !GetAtt LogDNAS3LambdaFunction.Arn
        - Event: 's3:ObjectRemoved:*'
          Function: !GetAtt LogDNAS3LambdaFunction.Arn
#Lambda + S3 Permissions
  LogDNALambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LogDNAS3LambdaFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${BucketName}"
#Lambda Function Setup
  LogDNAS3LambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Code:     
        S3Bucket: dan-cloudwatch-logdna
        S3Key: logdna-s3.zip
        # Upload file just once... there's a better way of handling this, but will do later
        # ZipFile: |
        #   def handler(event, context):
        #     return
      Description: Logdna Lambda Function for S3 integration provisioned through CF
      FunctionName: !Join ['', [ !Ref Owner, '-' , !Ref LambdaFunctionName]]
      Handler: index.handler
      Role: !GetAtt LogDNALambdaExecutionRole.Arn
      Runtime: !Ref LambdaFunctionRuntime
      Environment:
        Variables:
           LOGDNA_KEY: !Ref LogDnaAPIKey
#           LOGDNA_TAGS: optional,tags
#           LOGDNA_HOSTNAME: some.hostname
#           LOGDNA_URL: some.url
#           LOGDNA_BATCH_INTERVAL: 50
#           LOGDNA_BATCH_LIMIT: 25
#           LOGDNA_FREE_SOCKET_TIMEOUT: 300000
#           LOGDNA_MAX_LINE_LENGTH: 32000
#           LOGDNA_MAX_REQUEST_RETRIES: 5
#           LOGDNA_MAX_REQUEST_TIMEOUT: 300
#           LOGDNA_REQUEST_RETRY_INTERVAL: 100
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemorySize
      Tags:
        - Key: "X-Owner"
          Value: !Ref Owner
        - Key: "X-Email"
          Value: !Ref OwnerEmail
        - Key: "Reason"
          Value: "Test"
###Lambda Execution Role 
  LogDNALambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"